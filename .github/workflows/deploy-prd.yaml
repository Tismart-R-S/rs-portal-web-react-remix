name: PRD Deployment

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: PRD

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: üîÑ Limpiar instalaci√≥n previa
        run: |
          rm -rf node_modules package-lock.json

      - name: üîë Configurar credenciales de AWS CLI para Cloudflare R2
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.R2_PRD_ACCESS_ID_KEY }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.R2_PRD_ACCESS_SECRET_KEY }}" >> ~/.aws/credentials

          echo "[default]" > ~/.aws/config
          echo "region=auto" >> ~/.aws/config
          echo "output=json" >> ~/.aws/config
          echo "endpoint_url=${{ secrets.R2_PRD_ENDPOINT }}" >> ~/.aws/config

      - name: üîΩ Descargar archivo de configuraci√≥n desde Cloudflare R2
        run: |
          aws s3 cp "s3://rs-config-files-prd/env-portal" .env --endpoint-url=${{ secrets.R2_PRD_ENDPOINT }}

      - name: üìÅ Verificar archivo descargado
        run: ls -la

      - name: üîê Configurar credenciales de AWS CLI
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials

          echo "[default]" > ~/.aws/config
          echo "region=us-east-1" >> ~/.aws/config
          echo "output=json" >> ~/.aws/config

      - name: üîë Autenticarse en Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 919912553755.dkr.ecr.us-east-1.amazonaws.com

      - name: üîÑ Actualizar variables de entorno en ECS
        run: |
          TASK_ARNS=$(aws ecs list-tasks --cluster RS --desired-status RUNNING --query "taskArns" --output json)

          TASK_ARNS_STOPPED=$(aws ecs list-tasks --cluster RS --desired-status STOPPED --query "taskArns" --output json)

          COMBINED_TASK_ARNS=$(echo $TASK_ARNS $TASK_ARNS_STOPPED | jq -s add)

          if [ $(echo $COMBINED_TASK_ARNS | jq '. | length') -gt 0 ]; then
            LAST_TASK_ARN=$(echo $COMBINED_TASK_ARNS | jq -r 'sort_by(.) | last')
          else
            echo "No hay tareas registradas."
            exit 1
          fi

          TASK_DEFINITION_ARN=$(aws ecs describe-tasks --cluster RS --tasks $LAST_TASK_ARN --query "tasks[0].taskDefinitionArn" --output text)

          NEW_TASK_DEF="new-task-definition.json"

          aws ecs describe-task-definition --task-definition $TASK_DEFINITION_ARN --query taskDefinition > task-definition.json

          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' task-definition.json > cleaned-task-definition.json

          ENV_VARS=$(cat .env | grep -v '^#' | grep -v '^$' | jq -Rn '[inputs | capture("(?<name>[^=]+)=(?<value>.*)") | {name: .name, value: .value}]')

          FAMILY=$(jq -r '.family' cleaned-task-definition.json)

          jq --arg image "919912553755.dkr.ecr.us-east-1.amazonaws.com/rs-portal-web:latest" \
             --argjson env "$ENV_VARS" \
             '(.containerDefinitions[] | select(.name == "front-portal")).image = $image |
              (.containerDefinitions[] | select(.name == "front-portal")).environment = $env' \
             cleaned-task-definition.json > $NEW_TASK_DEF

          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://$NEW_TASK_DEF --query "taskDefinition.taskDefinitionArn" --output text)

          echo "Nueva definici√≥n de tarea registrada: $NEW_TASK_DEF_ARN"

          echo "TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: üî® Construir y etiquetar imagen Docker
        run: |
          VERSION=$(git rev-parse --short HEAD || echo "latest")
          echo "VERSION=$VERSION"
          docker build -t rs-portal-web:$VERSION .
          docker tag rs-portal-web:$VERSION 919912553755.dkr.ecr.us-east-1.amazonaws.com/rs-portal-web:latest

      - name: üì§ Subir imagen a Amazon ECR
        run: |
          docker push 919912553755.dkr.ecr.us-east-1.amazonaws.com/rs-portal-web:latest

      - name: üöÄ Implementar nueva versi√≥n en ECS
        run: |
          CLUSTER_NAME="RS"
          SERVICE_NAME="rs-recruitment-service"
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition "$TASK_DEF_ARN" --force-new-deployment
        
      #- name: üóëÔ∏è Eliminar tareas antiguas en ECS
        #run: |
          #CLUSTER_NAME="RS"
          #SERVICE_NAME="rs-recruitment-service"

          #TASK_ARNS=$(aws ecs list-tasks --cluster $CLUSTER_NAME --service-name $SERVICE_NAME --query "taskArns[]" --output text)
          #TASK_ARRAY=($TASK_ARNS)
          #NUM_TASKS=${#TASK_ARRAY[@]}

          #if [ "$NUM_TASKS" -gt 2 ]; then
          #    TASKS_TO_DELETE=("${TASK_ARRAY[@]:0:$((NUM_TASKS - 2))}")

          #    for TASK_ARN in "${TASKS_TO_DELETE[@]}"; do
          #        # Obtener el ARN de la definici√≥n de tarea
          #        TASK_DEFINITION_ARN=$(aws ecs describe-tasks --cluster $CLUSTER_NAME --tasks $TASK_ARN --query "tasks[0].taskDefinitionArn" --output text)

          #        # Imprimir el ARN de la tarea y el ARN de la definici√≥n de tarea
          #        echo "Eliminando tarea: $TASK_ARN, Task Definition ARN: $TASK_DEFINITION_ARN"
          #        aws ecs stop-task --cluster $CLUSTER_NAME --task $TASK_ARN
          #    done
          #else
          #    echo "No hay suficientes tareas para eliminar. Se requieren m√°s de 2."
          #fi
