name: PRD Deployment

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: PRD

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: 🔄 Limpiar instalación previa
        run: |
          rm -rf node_modules package-lock.json

      - name: 🔑 Configurar credenciales de AWS CLI para Cloudflare R2
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.R2_PRD_ACCESS_ID_KEY }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.R2_PRD_ACCESS_SECRET_KEY }}" >> ~/.aws/credentials

          echo "[default]" > ~/.aws/config
          echo "region=auto" >> ~/.aws/config
          echo "output=json" >> ~/.aws/config
          echo "endpoint_url=${{ secrets.R2_PRD_ENDPOINT }}" >> ~/.aws/config

      - name: 🔽 Descargar archivo de configuración desde Cloudflare R2
        run: |
          aws s3 cp "s3://rs-config-files-prd/env-portal" .env --endpoint-url=${{ secrets.R2_PRD_ENDPOINT }}

      - name: 📁 Verificar archivo descargado
        run: ls -la

      - name: 🔐 Configurar credenciales de AWS CLI
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials

          echo "[default]" > ~/.aws/config
          echo "region=us-east-1" >> ~/.aws/config
          echo "output=json" >> ~/.aws/config

      - name: 🔑 Autenticarse en Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 919912553755.dkr.ecr.us-east-1.amazonaws.com

      - name: 🔨 Construir y etiquetar imagen Docker
        run: |
          VERSION=$(git rev-parse --short HEAD || echo "latest")
          echo "VERSION=$VERSION"
          docker build -t rs-portal-web:$VERSION .
          docker tag rs-portal-web:$VERSION 919912553755.dkr.ecr.us-east-1.amazonaws.com/rs-portal-web:latest

      - name: 📤 Subir imagen a Amazon ECR
        run: |
          docker push 919912553755.dkr.ecr.us-east-1.amazonaws.com/rs-portal-web:latest

      - name: 🔄 Actualizar variables de entorno en ECS
        run: |
          TASK_DEFINITION_ARN="arn:aws:ecs:us-east-1:919912553755:task-definition/RS:17"
          NEW_TASK_DEF="new-task-definition.json"
          aws ecs describe-task-definition --task-definition $TASK_DEFINITION_ARN --query taskDefinition > task-definition.json
          ENV_VARS=$(grep -v '^#' .env | grep -v '^$' | awk -F= '{gsub(/"/, "\\\"", $2); print "{\"name\":\""$1"\",\"value\":\""$2"\"}"}' | paste -sd, -)
          FAMILY=$(jq -r '.family' task-definition.json)
          jq --arg image "919912553755.dkr.ecr.us-east-1.amazonaws.com/rs-portal-web:latest" \
             --argjson env "[$ENV_VARS]" \
             '(.containerDefinitions[] | select(.name == "front-portal")).image = $image |
              (.containerDefinitions[] | select(.name == "front-portal")).environment = $env' \
             task-definition.json > $NEW_TASK_DEF
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://$NEW_TASK_DEF --query "taskDefinition.taskDefinitionArn" --output text)
          echo "Nueva definición de tarea registrada: $NEW_TASK_DEF_ARN"
          echo "TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: 🚀 Implementar nueva versión en ECS
        run: |
          CLUSTER_NAME="RS"
          SERVICE_NAME="rs-recruitment-service"
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition "$TASK_DEF_ARN" --force-new-deployment